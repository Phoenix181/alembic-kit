#+TITLE: Setting up a Second GitHub Account
#+layout: post
#+categories: github emails ssh
#+liquid: enabled
#+feature_image: https://images.unsplash.com/photo-1514625796505-dba9ebaf5816?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1349&q=80
#+comments: true

Decided to make a small blog about something I did recently: set up a second GitHub account with ssh keys.

*** Table of Contents :TOC_7:
    - [[#preface--why][Preface & Why]]
    - [[#make-a-github-account][Make a GitHub Account]]
    - [[#ssh-keys][SSH Keys]]
    - [[#setting-up-dynamic-config][Setting up "Dynamic Config"]]
    - [[#end-note][End Note]]

*** Preface & Why
    I thought it might be a good idea to include a preface for this guide. It isn't meant for everyone and their moms, it's meant for devs who need a
    second GitHub account. There could be a multitude of reasons as to why you may need one. They may include having a personal one and one for work/
    school, too shy to let your name out when making PRs/ issues, perhaps participating in events like [[https://adventofcode.com/][Advent of Code]]/ [[https://www.hackerrank.com/][HackerRank]]/ [[https://www.codewars.com/][Codewars]] and not
    wanting your personal information to be shown on a discord server you're playing with (something along those lines...), etcetera etcetera.

    Of course, the recommended way is to just use the same GitHub account and different emails in your commits. I needed this specifically for my
    company. I have to commit with an email =khinshan.khan@company.com=, so that was my focus. Bbbut, I realized you could also set up ssh stuff and
    a whole new second account. I really meant to document what I had to do for myself, but might as well write a post with all the information.

    It /is/ worth noting that GitHub's ToS has the following lines:
    #+begin_quote
    One person or legal entity may maintain no more than one free Account (if you choose to control a machine account as well, that's fine, but it can
    only be used for running a machine).
    #+end_quote

    Not sure how much they care about this, but my personal is actually not a free account, so I don't consider myself breaking the ToS if I did...
    but at the same time I'd rather let that disclaimer sit there just in case. Again! Multiple emails on a singular account is fine and I'd rather
    you did that. But maybe (hopefully!) you're working GitHub/ got their permission for a second account. They do let you have a machine account, so
    maybe you're using that... Anywho, this post is just information you can probably pierce together from other people's blog posts, but it's good to
    just have a solid reference sometimes.


    Also better to make [[https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-organizations][GitHub organizations]] perhaps, but it wouldn't really solve my issue at hand, nor a lot people's... so tread with caution is all
    I can say.

*** Make a GitHub Account
    Simple enough, navigate over to [[https://github.com/join?source=login][GitHub's signup page]] and sign up for your accounts. Note: as of writing this post and to my knowledge, you can't
    be logged into multiple accounts at once. Easily solved with different browsers, or utilizing incognito.

*** SSH Keys
    These steps should be ran per account on your computer. I think you just need =ssh= for this, but it'd be a good idea to have =git= installed too. For
    step =2=, for your second account, do /not/ leave the default name. I like the idea of naming it =~/.ssh/USERNAME=, replacing =USERNAME= with the GitHub
    username.
    1. ssh-keygen -t rsa -b 4096 -C "hello@gmail.com"
       1. Replace the email with whatever email you used to sign up for GitHub
       2. the quotes matter around the email
    2. It'll ask for filename to save in (default is fine, just press enter)
       1. you'll want to start keeping track when you have multiple accounts/ servers to manage
    3. It'll ask for a passphrase
       1. this is if you leave your computer unattended... honestly you can leave it blank, just press enter
       2. if you enter one, you're going to have to type it in every time you try to use the key pair
    4. Confirm passphrase
       1. enter again if you left the first one blank, else type it
    5. Now cd ~/.ssh
       1. this should have a file called =id_rsa= and =id_rsa.pub=
       2. or whatever filename you gave it in step 2 and that name =.pub=
       3. this is the "key pair"
       4. can view files using ls
       5. you NEVER share the =id_rsa= file, only the =.pub= one
    6. Copy the contents of the =id_rsa.pub= file (or whatever the .pub file is named)
       1. you can go cat =id_rsa.pub= and and highlight the contents and press ctr + shift + c to copy, or open it in your favorite text editor and copy
    7. Login to Github (website) and go to setting (arrow dropdown on your profile picture on the right)
    8. Choose SSH and GPG keys from the left menu
    9. Click the green New SSH key button
    10. Title it whatever like home or something and paste the contents from before into key section and confirm
    11. You should be done. Try running =ssh -T git@github.com= from command line and you'll receive a success message of sorts (if your username is right, you did it right).
        1. A warning might pop up the first time, just say yes and it'll work fine

*** Setting up "Dynamic Config"
    Now, if you'll notice, whenever using ssh clone or something, git tried to use your default account! Yes, this is to be expected. Let's fix it!
    For the sake of not doxxing my invested name just yet... let's say my second account's name is =second=.

    Okay, so the cleanest resolution I've seen is have a directory called =second=, in which your configuration kicks in. This way, you have a global,
    then scoped git configs.

    Let's execute
    #+begin_src
mkdir -p ~/second
    #+end_src
    Dissecting this command: =mkdir= makes a directory. the =p= flag makes any parent directories if need be... you probably won't need that flag in
    retrospect. And =~/second= is telling =mkdir= to make a directory called =second= in the home directory (=~= is an alias, you can type in =echo ~= to
    view what your home directory is... unless it's messed up somehow).

    Now in your =~/.gitconfig= add in this bit to the bottom (don't overwrite the file!):
    #+begin_src
[includeIf "gitdir:~/second/"]
	path = ~/second/.gitconfig
    #+end_src
    What this does is use the =.gitconfig= located in =~/second/.gitconfig= whenever you're using the =~/second/= path. This means if you ran a ssh clone
    while in that directory, it will utilize the configuration in =~/second/.gitconfig= or else the global.

    Now, let's actually make it utilize the right information by throwing this into =~/second/.gitconfig=.
    #+begin_src
[user]
	name = "second"
	email = "second@gmail.com"
[core]
	sshCommand = "ssh -i ~/.ssh/second"
    #+end_src
    What this bit does is set the =user.name= to =second= and =user.email= to =second@gmail.com=. Now the information shown when you push is changed! But, the
    =sshCommand = "ssh -i ~/.ssh/second"= is the bit that actually uses the ssh key we generated for this second account. =ssh= we're kind of familiar
    with, it uses encrypted key pairs to do a secure push. what the =i= flag does is allow you to specify an =identity_file= which from the man page is:
    #+begin_quote
    Selects a file from which the identity (private key) for public key authentication is read.  The default is ~/.ssh/id_dsa, ~/.ssh/id_ecdsa,
    ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk and ~/.ssh/id_rsa. Identity files may also be specified on a per-host basis in the
    configuration file.  It is possible to have multiple -i options (and multiple identities specified in configuration files).  If no certificates
    have been explicitly specified by the CertificateFile directive, ssh will also try to load certificate information from the filename obtained by
    appending -cert.pub to identity filenames.
    #+end_quote

    Andddd we're chilling. Now everything globally is using =id_rsa= and only in the =~/second/= directory, it'll use the =second= account information.
*** End Note
    Now remember: use this guide wisely. Obviously abusing said information is a huge no no, and it's on you really. Don't try to set up bots or
    crawlers. Try to pay for your accounts. GitHub is a decent service imho, so it's worth it.

    But, if anything, most of the instructions here work for [[https://about.gitlab.com/][GitLab]]. In my small search of their [[https://about.gitlab.com/terms/][ToS]] nothing popped up about keeping a single account.
    In this guide, just you're going to have to use intuition to know what to replace, because I don't see myself making a GitLab guide as I don't use
    it.

    With that, you'll notice that the table of contents and comment section is coming along nicely. Feel free to ask questions if need be, or else
    enjoy :+1:
